-- Q1.학생의 수학, 영어, 국어 점수 중 한 과목이라도 50 미만이 아니고
-- 학점이 B이상인 학생만 학생번호, 이름, 학점으로 별칭 붙여서 출력하기(SELECT 활용)
SELECT STUDENT_NUMBER 학생번호, STUDENT_NAME 이름, STUDENT_GRADE 학점
FROM TBL_STUDENT
WHERE NOT((STUDENT_MATH < 50)OR(STUDENT_ENG < 50)OR(STUDENT_KOR < 50)) AND STUDENT_GRADE = 'B'; 

SELECT * FROM TBL_STUDENT;

-- Q2. 학생의 수학, 영어, 국어 점수 중 한 과목이라도 30점 미만이면 DB에서 삭제하기(DELETE활용)
DELETE FROM TBL_STUDENT 
WHERE ((STUDENT_MATH < 30) OR (STUDENT_ENG < 30 ) OR (STUDENT_KOR < 30));
SELECT * FROM TBL_STUDENT;

SELECT * FROM EMPLOYEES;

--1번
SELECT EMPLOYEE_ID, FIRST_NAME || ' ' ||LAST_NAME 이름, EMAIL, PHONE_NUMBER, HIRE_DATE , JOB_ID ,SALARY , COMMISSION_PCT , MANAGER_ID, DEPARTMENT_ID 
FROM EMPLOYEES;

--2번
SELECT FIRST_NAME , SALARY 
FROM EMPLOYEES;

--3번
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >= 5000;

--4번
SELECT SYSDATE, SYSDATE +10
FROM dual;

--5번
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50;

SELECT * FROM EMPLOYEES;
-- 6번
SELECT * 
FROM EMPLOYEES
WHERE LAST_NAME = 'King';

SELECT * FROM EMPLOYEES;

--7번 
SELECT *
FROM EMPLOYEES
WHERE salary != 0;
-- where salary is not null;
-- salary != null 시 unknown으로 됌

SELECT * FROM EMPLOYEES;

-- 8번
SELECT * FROM EMPLOYEES;

SELECT DISTINCT JOB_ID 
FROM EMPLOYEES;

--9번
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY BETWEEN 3000 AND 7000;
-- between 쓸 때 and 기억

--10번
SELECT FIRST_NAME 
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '____e';
-- 다른 방법은? 
-- %는 어떤 문자를 포함한 모든 문자이다 즉, _패턴하고는 반대성향


--11번
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, JOB_ID
FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG' OR JOB_ID = 'SA_REP';
-- 주의사항 구문에 명시된 명제를 제대로 확인할것 AND로 착각

--12번
SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'A%';

--LIKE 연산을 써서 %을 활용하는 것은 인지하고 있었으나 ''감싸줘야하는 부분은 미인지

--13번 
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES e 
WHERE SALARY >= 10000 AND DEPARTMENT_ID = 90;


--14번
SELECT * FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES
WHERE SALARY <= 5000 or DEPARTMENT_ID = 30;

--15번
SELECT * FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES
WHERE LAST_NAME LIKE '_a%';


--16번
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES
ORDER BY SALARY DESC;

--17번
SELECT * FROM EMPLOYEES;

SELECT SALARY *0.1 BONUS
FROM EMPLOYEES;

--18번
SELECT * FROM EMPLOYEES;

SELECT COMMISSION_PCT, SALARY
FROM EMPLOYEES
WHERE SALARY >= 6000 
ORDER BY COMMISSION_PCT, SALARY DESC;
/* 
 * ORDER BY 절안에서는 , 이용하여 컬럼명을 사용 가능
 * ORDER BY 절안에서 어떤 컬럼을 중심으로 시작하냐에 따라서, 어트리뷰트가 먼저 붙는다
 * SELECT 절에서는 출력되게하는 어트리뷰트가 나오지만, 이와 상관없이 ORDER BY 다른 컬럼을 쓰게 된다면 적용 된다
 */


--19번
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, SALARY 
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'A%' AND SALARY >=10000;

--20번
SELECT * FROM EMPLOYEES;

SELECT HIRE_DATE + 365 "입사 1년 후"
FROM EMPLOYEES;
